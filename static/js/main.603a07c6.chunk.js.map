{"version":3,"sources":["lib/createRequestThunk.js","modules/loading.js","lib/api/apiPlanets.js","lib/api/apiPeople.js","lib/api/apiMovies.js","modules/planet.js","modules/planetList.js","modules/people.js","modules/peopleList.js","modules/movie.js","modules/movieList.js","modules/index.js","App.js","index.js"],"names":["createRequestThunk","type","request","SUCCESS","FAILURE","params","dispatch","a","startLoading","response","payload","data","finishLoading","error","START_LOADING","FINISH_LOADING","createAction","requestType","loading","handleActions","state","action","getPlanet","id","axios","get","getPlanets","planets","totalPages","num","parseInt","allData","morePagesAvailable","currentPage","results","forEach","e","push","getPerson","getPeople","people","getMovie","getMovies","getPlanetById","api","planet","planetList","getPeopleById","peopleList","getMovieById","movie","movieList","rootReducer","combineReducers","Home","React","lazy","People","PeopleDetail","Planets","PlanetDetail","Movies","MovieDetail","App","fallback","basename","component","path","exact","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.603a07c6.chunk.js","sourcesContent":["import { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport default function createRequestThunk(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return params => async dispatch => {\r\n    dispatch({ type });\r\n    dispatch(startLoading(type));\r\n    try {\r\n      const response = await request(params);\r\n      dispatch({\r\n        type: SUCCESS,\r\n        payload: response.data\r\n      });\r\n      dispatch(finishLoading(type));\r\n    } catch (e) {\r\n      dispatch({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true\r\n      });\r\n      dispatch(startLoading(type));\r\n      throw e;\r\n    }\r\n  };\r\n}\r\n\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  requestType => requestType\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  requestType => requestType\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default loading;\r\n","import axios from 'axios';\r\n\r\nexport const getPlanet = id =>\r\n  axios.get(`https://swapi.dev/api/planets/${id}/`);\r\n\r\n//export const getPlanets = id =>\r\n//  axios.get(`https://swapi.dev/api/planets/`);\r\n\r\nexport const getPlanets = async () => {\r\n\r\n    const planets = await axios.get('https://swapi.dev/api/planets/');\r\n    //console.log(planets);\r\n    \r\n    let totalPages = 0;\r\n    const num = parseInt(planets.data['count']);\r\n\r\n    if (num % 10) {\r\n        totalPages = parseInt(num / 10) + 1;\r\n    } else {\r\n        totalPages = num / 10;\r\n    }\r\n\r\n    let allData = [];\r\n    let morePagesAvailable = true;\r\n    let currentPage = 0;\r\n\r\n    while(morePagesAvailable) {\r\n        currentPage++;\r\n        const response = await axios.get(`https://swapi.dev/api/planets/?page=${currentPage}`);\r\n        //console.log(response.data);\r\n        response.data.results.forEach(e => allData.push(e));\r\n        morePagesAvailable = currentPage < totalPages;\r\n    }\r\n\r\n    //console.log(allData);        \r\n    return { data: allData };\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const getPerson = id =>\r\n  axios.get(`https://swapi.dev/api/people/${id}/`);\r\n\r\nexport const getPeople = async () => {\r\n\r\n    const people = await axios.get('https://swapi.dev/api/people/');\r\n    \r\n    let totalPages = 0;\r\n    const num = parseInt(people.data['count']);\r\n\r\n    if (num % 10) {\r\n        totalPages = parseInt(num / 10) + 1;\r\n    } else {\r\n        totalPages = num / 10;\r\n    }\r\n\r\n    let allData = [];\r\n    let morePagesAvailable = true;\r\n    let currentPage = 0;\r\n\r\n    while(morePagesAvailable) {\r\n        currentPage++;\r\n        const response = await axios.get(`https://swapi.dev/api/people/?page=${currentPage}`);\r\n\r\n        response.data.results.forEach(e => allData.push(e));\r\n        morePagesAvailable = currentPage < totalPages;\r\n    }\r\n       \r\n    return { data: allData };\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const getMovie = id =>\r\n  axios.get(`https://swapi.dev/api/films/${id}/`);\r\n\r\nexport const getMovies = id =>\r\n  axios.get(`https://swapi.dev/api/films/`);\r\n","import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPlanets';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\n\r\nconst GET_PLANET = 'planet/GET_PLANET';\r\nconst GET_PLANET_SUCCESS = 'planet/GET_PLANET_SUCCESS';\r\n\r\n//export const getPlanet = createAction(GET_PLANET, id => id);\r\n\r\nexport const getPlanetById = createRequestThunk(GET_PLANET, api.getPlanet);\r\n\r\nconst initialState = {\r\n  planet: null\r\n};\r\n\r\nconst planet = handleActions(\r\n  {\r\n    [GET_PLANET_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      planet: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default planet;\r\n","import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPlanets';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\n\r\nconst GET_PLANETS = 'planetList/GET_PLANETS';\r\nconst GET_PLANETS_SUCCESS = 'planetList/GET_PLANETS_SUCCESS';\r\n\r\n\r\nexport const getPlanets = createRequestThunk(GET_PLANETS, api.getPlanets);\r\n\r\nconst initialState = {\r\n  planetList: null\r\n};\r\n\r\nconst planetList = handleActions(\r\n  {\r\n    [GET_PLANETS_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      planetList: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default planetList;\r\n","import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPeople';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\n\r\nconst GET_PERSON = 'people/GET_PERSON';\r\nconst GET_PERSON_SUCCESS = 'people/GET_PERSON_SUCCESS';\r\n\r\n//export const getPlanet = createAction(GET_PLANET, id => id);\r\n\r\nexport const getPeopleById = createRequestThunk(GET_PERSON, api.getPerson);\r\n\r\nconst initialState = {\r\n  people: null\r\n};\r\n\r\nconst people = handleActions(\r\n  {\r\n    [GET_PERSON_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      people: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default people;\r\n","import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiPeople';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\n\r\nconst GET_PEOPLE = 'peopleList/GET_PEOPLE';\r\nconst GET_PEOPLE_SUCCESS = 'peopleList/GET_PEOPLE_SUCCESS';\r\n\r\n\r\nexport const getPeople = createRequestThunk(GET_PEOPLE, api.getPeople);\r\n\r\nconst initialState = {\r\n  peopleList: null\r\n};\r\n\r\nconst peopleList = handleActions(\r\n  {\r\n    [GET_PEOPLE_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      peopleList: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default peopleList;\r\n","import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiMovies';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\n\r\nconst GET_MOVIE = 'movie/GET_MOVIE';\r\nconst GET_MOVIE_SUCCESS = 'movie/GET_MOVIE_SUCCESS';\r\n\r\nexport const getMovieById = createRequestThunk(GET_MOVIE, api.getMovie);\r\n\r\nconst initialState = {\r\n  movie: null\r\n};\r\n\r\nconst movie = handleActions(\r\n  {\r\n    [GET_MOVIE_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      movie: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default movie;\r\n","import { handleActions } from 'redux-actions';\r\nimport * as api from '../lib/api/apiMovies';\r\nimport createRequestThunk from '../lib/createRequestThunk';\r\n\r\nconst GET_MOVIES = 'movieList/GET_MOVIES';\r\nconst GET_MOVIES_SUCCESS = 'movieList/GET_MOVIES_SUCCESS';\r\n\r\n\r\nexport const getMovies = createRequestThunk(GET_MOVIES, api.getMovies);\r\n\r\nconst initialState = {\r\n  movieList: null\r\n};\r\n\r\nconst movieList = handleActions(\r\n  {\r\n    [GET_MOVIES_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      movieList: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default movieList;\r\n","import { combineReducers } from 'redux';\r\nimport planet from './planet';\r\nimport planetList from './planetList';\r\nimport people from './people';\r\nimport peopleList from './peopleList';\r\nimport movie from './movie';\r\nimport movieList from './movieList';\r\nimport loading from './loading';\r\n\r\nconst rootReducer = combineReducers({\r\n    planet,\r\n    planetList,\r\n    people,\r\n    peopleList,\r\n    movie,\r\n    movieList,\r\n    loading\r\n  });\r\n\r\n  export default rootReducer;","import React, {Suspense} from 'react';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\n\n//const AppBar = React.lazy(() => import('./components/AppBar'));\nconst Home = React.lazy(() => import('./pages/Home'));\nconst People = React.lazy(() => import('./pages/People'));\nconst PeopleDetail = React.lazy(() => import('./pages/PeopleDetail'));\nconst Planets = React.lazy(() => import('./pages/Planets'));\nconst PlanetDetail = React.lazy(() => import('./pages/PlanetDetail'));\nconst Movies = React.lazy(() => import('./pages/Movies'));\nconst MovieDetail = React.lazy(() => import('./pages/MovieDetail'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Welcome, loading...</div>}>\n      <Router basename='/starwars_films_info'>\n        <Route component={Home} path=\"/\" exact={true} />\n        <Route component={People} path=\"/people\" />\n        <Route component={PeopleDetail} path=\"/person\" />  \n        <Route component={Planets} path=\"/planets\" />\n        <Route component={PlanetDetail} path=\"/planet\" />\n        <Route component={Movies} path=\"/starwars_films_info/movies\" />\n        <Route component={MovieDetail} path=\"/movie\" />\n      </Router>\n    </Suspense>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './modules';\nimport ReduxThunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk)) \n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}